NOTE: THIS DOCUMENT IS WORK IN PROGRESS. PLEASE DO NOT RELY ON IT FOR ANYTHING!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Personal notes: Prerequisites seem to include Python, omniORB and gsl. The first one is not a problem. Regarding omniORB, it compiled fine and this using Microsoft Visual C++, which is what we want. Now, regarding gsl, there are some problems. First, one has to modify "configure" to account for the fact that Windows (and therefore Microsoft Visual C++) doesn't support symbolic links. This can easily be fixed by making a copy of the files rather than making links to them. This allows the compilation to start, but then a bunch errors are generated. They are related to "BASE_GSL_COMPLEX*" in files such as "C:\Projects\gsl-1.11\matrix\rowcol.c"...

Build the CellML DOM API from its source code under Windows
===========================================================

Prerequisites
-------------

The Mozilla framework will have to be built first, if you are to use the CellML DOM API from within PCEnv.


Cygwin
------

- Edit C:\Projects\Cygwin.bat file so that

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SET INCLUDE=%MSSDK%\include;%MSSDK%\include\atl;%INCLUDE%
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

now reads

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SET INCLUDE=%MSSDK%\include;%MSSDK%\include\atl;%MSSDK%\include\mfc;%INCLUDE%
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Python
------

Python is required to build the CellML DOM API and has to be installed separately.

Python 2.5.2 can be downloaded from http://www.python.org/. You want http://www.python.org/ftp/python/2.5.2/python-2.5.2.msi. From there, install it in C:\Projects\.


omniORB
-------

omniORB is also required to build the CellML DOM API and also has to be installed separately.

omniORB 4.1.2 can be downloaded from http://sourceforge.net/projects/omniorb/. You want omniORB-4.1.2.tar.gz. From there:

- Unpack that file to C:\Projects\.
- Edit C:\Projects\omniORB-4.1.2\config\config.mk so that

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#platform = x86_win32_vs_8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

now reads

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
platform = x86_win32_vs_8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Edit C:\Projects\omniORB-4.1.2\mk\platforms\x86_win32_vs_8.mk so that

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#PYTHON = /cygdrive/c/Python24/python
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

now reads

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PYTHON = /cygdrive/c/Projects/Python25/python
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- From a Cygwin bash shell prompt (using the Cygwin batch file created for the Mozilla framework build):

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd /cygdrive/c/Projects/omniORB-4.1.2/src
make export
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


gsl
---

gsl is also required to build the CellML DOM API and also has to be installed separately.

gsl 1.11 can be downloaded from http://www.gnu.org/. You want gsl-1.11.tar.gz. From there:

- Unpack that file to C:\Projects\.
- Edit C:\Projects\gsl-1.11\configure so that

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LN_S=$as_ln_s
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

now reads

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LN_S='cp -p'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The reason behind the above is that Windows (and therefore Microsoft Visual C++) does not support symbolic links.

- From a Cygwin bash shell prompt (using the Cygwin batch file created for the Mozilla framework build):

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd /cygdrive/c/Projects/gsl-1.11
./configure CC="/cygdrive/c/Projects/CellML_DOM_API/build/msvc-wrapper" CXX="/cygdrive/c/Projects/CellML_DOM_API/build/msvc-wrapper" LD="/cygdrive/c/Projects/CellML_DOM_API/build/msvc-wrapper"
make
make install
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Check out the source code
-------------------------

From a Cygwin bash shell prompt (using the Cygwin batch file created for the Mozilla framework build):

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd ~
svn co https://svn.physiomeproject.org/svn/physiome/CellML_DOM_API/trunk/ CellML_DOM_API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Note: you will be told that the certificate is invalid, so you may want to ignore that message and accept the certificate permanently.


Build the CellML DOM API
------------------------

From a Cygwin bash shell prompt (using the Cygwin batch file created for the Mozilla framework build):

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd /cygdrive/c/Projects/CellML_DOM_API
aclocal && autoconf && automake
./configure CC="/cygdrive/c/Projects/CellML_DOM_API/build/msvc-wrapper" CXX="/cygdrive/c/Projects/CellML_DOM_API/build/msvc-wrapper" LD="/cygdrive/c/Projects/CellML_DOM_API/build/msvc-wrapper" --enable-context --enable-annotools --enable-cuses --enable-cevas --enable-malaes --enable-ccgs --enable-cis  --enable-vacss --enable-xpcom=/cygdrive/c/Projects/mozilla-obj/obj-i686-pc-cygwin/stablexr/dist
make
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Note #1:	"aclocal && autoconf && automake" is not required if building from a source tar.
Note #2:	if the CellML DOM API is to be used within PCEnv, then the following extra parameter is to be used in the call to "configure": "--enable-xpcom=/cygdrive/c/Projects/mozilla-obj/obj-i686-pc-cygwin/stablexr/dist".


Test the CellML API
-------------------

From a Cygwin bash shell prompt (using the Cygwin batch file created for the Mozilla framework build):

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd ~/CellML_DOM_API
make check
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
