/*!
\page getting_started Getting Started with the API Implementation (read this first)

\section stable_and_hg Obtaining the CellML API

Summary of how to obtain the API Implementation:
<table>
  <tr>
    <td>&nbsp;</td>
    <th>Stable</th>
    <th>Bleeding Edge</th>
  </tr>
  <tr>
    <th>Using Binary SDK</th>
    <td><a href="http://www.cellml.org/tools/downloads/cellml_api/releases/">Release page</a> under 'Stable Releases'.</td>
    <td><a href="https://sourceforge.net/projects/cellml-api/files/CellML-API-Nightly/">Nightly builds</a></td>
  </tr>
  <tr>
    <th>From source</th>
    <td>git clone https://github.com/cellmlapi/cellml-api.git; cd cellml-api; git checkout 1.11</td>
    <td>git clone https://github.com/cellmlapi/cellml-api.git</td>
  </tr>
</table>

If you check out the source code, you can keep up-to-date with new changes, by changing into the cellml-api directory and running:
\verbatim
  git pull
\endverbatim

Note that bleeding edge versions may have problems which stop them from compiling or working correctly. You can check the status of the compilation and automated tests on different platforms <a href="http://autotest.bioeng.auckland.ac.nz/cellml-build/waterfall">here</a>.

Binaries (SDK packages) for Linux (x86 and AMD64), Windows (32 bit Microsoft Visual C++ 2010 and MinGW), and Mac OS X (PowerPC, x86, and x86_64 universal binaries) are built every night (at 11 PM New Zealand time) on days where there have been changes to source code. Nightly builds can be found <a href="https://sourceforge.net/projects/cellml-api/files/CellML-API-Nightly/">here</a> under the version of the API currently being worked towards. Note: old nightlies are not guaranteed to be hosted forever, so please do not publish links to specific binaries; instead either host the binary elsewhere, or link to a stable release.

The SDK is packaged in a way that is specific to the platform you are on; tar.bz2 for Linux platforms, .dmg on Mac OS X, and a choice of a self-extracting executable or a zip file on Windows.

\section using_bin_sdk  Using a binary SDK
Once you have extracted the SDK, you need to set up your build environment to work with the SDK by following these steps:

- On Windows, you need to make sure you have the appropriate C++ standard library in your path (even if you only plan to use the CellML SDK from Java or Python). If you downloaded the MSVC 2010 version of the SDK, you can do this by installing the <a href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&id=5555">MSVC Redistributable from Microsoft</a>. If you downloaded the MinGW version of the SDK, you need to put the directory containing the libstdc++-6.dll library in your path (this file comes with MinGW).
- To compile C++ programs, you need to ensure the SDK include directory is in your include path. If you are using gcc (including MinGW), you can do this with a shell command like:
    export CPLUS_INCLUDE_PATH=/path/to/sdk/include:$CPLUS_INCLUDE_PATH
  On MSVC10, a different environment variable is used; at the cmd.exe prompt:
<pre>
    set INCLUDE="c:\path\to\sdk\include";"%INCLUDE%"
</pre>
- For C++ program compilation, you also need to set your library path. On gcc systems (including MinGW / MSYS) use the following bash command:
    export LIBRARY_PATH=/path/to/sdk/lib:$LIBRARY_PATH
  On MSVC10 (at the cmd.exe prompt):
<pre>
    set LIB="c:\path\to\sdk\libs";"%LIB%"
</pre>
- To run any program using the API (whether C++, Python or Java), you need to tell the dynamic linker where to find the DLLs from the CellML SDK. We suggest you distribute the relevant binaries with your application. However, for development, you may want to point the path into your SDK install like this:
  On Linux (and other glibc based systems) use this bash command:
<pre>
    export LD_LIBRARY_PATH=/path/to/sdk/lib:$LD_LIBRARY_PATH
</pre>
  On Mac OS X use this bash command:
<pre>
    export DYLD_LIBRARY_PATH=/path/to/sdk/lib:$DYLD_LIBRARY_PATH
</pre>
  On Windows (at the cmd.exe prompt):
<pre>
    set PATH="c:/path/to/sdk/lib";"%PATH%"
</pre>
- To compile and / or run Java code that uses the CellML API, you need to put cellml.jar into the classpath, using a command like this:
    Non-Windows (bash shell):
<pre>
      export CLASSPATH=/path/to/sdk/lib/cellml.jar:$CLASSPATH
</pre>
    Windows (at cmd.exe):
<pre>
      set CLASSPATH="c:/path/to/sdk/lib/cellml.jar";"%CLASSPATH%"
</pre>
- When running Java programs, you need to set the java.library.path property to include the CellML SDK lib directory. One way to do this is to pass an option to java like this: "-Djava.library.path=/path/to/sdk/lib"
- When running Python programs, you need to set the PYTHON_PATH environment variable to point to the Python subdirectory of the SDK lib directory:
<pre>
      export PYTHON_PATH=/path/to/sdk/lib/python:$PYTHON_PATH
</pre>
*/