#ifndef _MaLaES_idl_
#define _MaLaES_idl_
#include "CUSES.idl"
#include "AnnoTools.idl"
#include "CeVAS.idl"

/**
 * MaLaES (the MathML Language Expression Service) provides facilities for
 * converting from content MathML expressions (in the context of a CellML
 * component or reaction) into expressions in a particular programming
 * language. The translation into a programming language occurs according to a
 * special language description format called MAL.
 */
module cellml_services
{
  /**
   * A source variable annotated by a degree.
   */
  interface DegreeVariable
    : XPCOM::IObject
  {
    /**
     * The source variable.
     */
    readonly attribute cellml_api::CellMLVariable variable;

    /**
     * The degree of the variable.
     * 0 = Used outside a derivative.
     * 1 = First order derivative.
     * 2 = Second order derivative.
     * ...
     */
    readonly attribute unsigned long degree;
  };

  /**
   * An interface allowing for iteration of variables by degree.
   */
  interface DegreeVariableIterator
    : XPCOM::IObject
  {
    /**
     * Fetches the next degree annotated variable.
     */
    DegreeVariable nextDegreeVariable();
  };

  /**
   * An interface allowing transformation results to be described.
   */
  interface MaLaESResult
    : XPCOM::IObject
  {
    /**
     * A string listing any errors that occurred. Applications should always
     * check this attribute, and if it is set to a non-empty string, should not
     * attempt to use any other operations or attributes on this interface.
     */
    readonly attribute wstring compileErrors;
    
    /**
     * The primary expression, in the transformed to language.
     */
    readonly attribute wstring expression;

    /**
     * The number of supplementary blocks defined.
     */
    readonly attribute unsigned long supplementariesLength;

    /**
     * Fetches a supplementary block by the index.
     * @param index The zero based index of the block to fetch.
     * @raises CellMLException if the index is out of range.
     */
    wstring getSupplementary(in unsigned long index)
      raises(cellml_api::CellMLException);

    /**
     * Iterates through the list of 'source' variables which are involved in
     * this result.
     */
    cellml_api::CellMLVariableIterator iterateInvolvedVariables();

    /**
     * Iterates through the list of 'source' variables annotated by their
     * degree (0 = used as a non-derivative, 1 = used as a first order
     *   derivative, ...)...
     */
    DegreeVariableIterator iterateInvolvedVariablesByDegree();

    /**
     * Iterates through the list of 'source' variables which are used as a
     * bound variable in this result.
     * Be aware that this only works if the bvarIndex command is used in the
     * MAL specification.
     */
    cellml_api::CellMLVariableIterator iterateBoundVariables();

    /**
     * Retrieves the highest degree on any diff application / binding.
     * @param aVar The variable to look up.
     */
    unsigned long getDiffDegree(in cellml_api::CellMLVariable aVar);

    /**
     * True if the expression concerned involves external code.
     */
    readonly attribute boolean involvesExternalCode;
  };

  /**
   * A MaLaES transformer, which takes MathML inputs, and produces programming
   * language outputs.
   */
  interface MaLaESTransform
    : XPCOM::IObject
  {
    /**
     * A string listing any compile errors that occurred producing this
     * MaLaESTransform. Applications should always check this attribute, and if
     * it is set to a non-empty string, should not attempt to use any other
     * operations or attributes on this interface.
     */
    readonly attribute wstring compileErrors;

    /**
     * Converts a MathML expression into the programming language, using the
     * MAL file specification used to compile this transform.
     * @param aCeVAS The CeVAS object to use to find variable sources.
     * @param aCUSES The CUSES object to use for unit conversions.
     * @param aAnnos The annotation set on which to look up variable names.
     * @param aMathML The MathML element tree to use.
     * @param aContext The CellML element (component or reaction) to use as
     *                 context for resolving variables.
     * @param aUnitsOf A variable into which the value is being stored.
     *                 Providing this allows MaLaES to apply an appropriate
     *                 units conversion to the expression. This may be set to
     *                 null in which case no units conversion will occur on the
     *                 result.
     */
    MaLaESResult transform(
                           in cellml_services::CeVAS aCeVAS,
                           in cellml_services::CUSES aCUSES,
                           in cellml_services::AnnotationSet aAnnos,
                           in mathml_dom::MathMLElement aMathML,
                           in cellml_api::CellMLElement aContext,
                           in cellml_api::CellMLVariable aUnitsOf,
                           in cellml_api::CellMLVariable aBoundUnitsOf,
                           in unsigned long aUnitsDiffDegree
                          );
  };

  /**
   * The bootstrap interface that can be used as a MaLaES transformer factory.
   */
  interface MaLaESBootstrap
    : XPCOM::IObject
  {
    /**
     * Creates a MaLaES object.
     * @param specification The MAL format description of what language to
     *                      output.
     */
    MaLaESTransform compileTransformer(in wstring specification);
  };
};
#endif //_MaLaES_idl_ 
