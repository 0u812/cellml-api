#line 2 "TeLICeMScanner.cpp"
#line 2 "TeLICeMS/sources/TeLICeMScan.l"
#define YY_NO_UNISTD_H
#include <iostream>
#define IN_LEXER
#include "TeLICeMParse.tab.hh"



#line 11 "TeLICeMScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 34
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer TeLICeMFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 * Given that the standard has decreed that size_t exists since 1989,
 * I guess we can afford to depend on it. Manoj.
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *TeLICeMalloc (yy_size_t  );
void *TeLICeMrealloc (void *,yy_size_t  );
void TeLICeMfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int TeLICeMStateScan::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 96
#define YY_END_OF_BUFFER 97
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[339] =
    {   0,
        0,    0,    0,    0,   97,   95,    1,    2,   95,   90,
       95,   95,   93,   95,   95,   95,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   95,
       89,   96,   88,   89,    1,   83,   91,   93,   93,    0,
       86,   84,   82,   85,   92,   92,   92,   92,   39,   92,
       92,   92,   92,   92,   92,   92,   44,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   33,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       68,   92,   92,   92,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   92,   92,   92,   92,    0,    0,
       87,   91,   91,   93,    0,   93,   92,   38,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   45,   92,   92,
       47,   92,   92,   92,   15,   92,   92,   55,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   60,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   66,   67,   34,
       92,   92,   92,   92,   92,   92,   72,   92,   92,   37,
       92,   92,   92,   92,   92,   92,   79,   92,   92,   92,
       92,   92,    0,   92,   30,   40,   92,   12,   42,   92,
       92,   43,   22,   23,   46,   48,   49,   92,   92,   92,

       92,   54,   92,   92,   18,   92,   92,   92,   58,   92,
       59,   92,   20,   61,   19,   92,   92,   92,   92,   63,
       64,   27,   35,   16,   28,   92,   70,   71,   92,    5,
       92,   92,   74,   92,   17,   76,   77,   78,   80,   81,
       92,   92,   92,   92,    0,   92,   92,   92,   24,   92,
       92,   92,   92,   29,   92,   56,   21,   92,   92,   36,
       26,   25,   62,   92,   92,   92,   92,   73,   92,   92,
       32,   13,   31,   14,    0,    0,   92,   92,   92,   92,
       51,   92,   53,   92,   57,   92,   92,   92,   92,   92,
       92,   92,   92,    0,    0,    0,    0,    0,    0,   94,

       92,   41,   92,   50,   52,   10,   92,   92,   92,   92,
        4,   92,   11,   92,    0,    0,    0,   94,    0,   94,
        0,   94,   92,    6,   92,    9,   92,   92,    3,   75,
       94,    0,   94,    7,    8,   65,   69,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    1,    1,    1,    8,
        1,    1,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,    1,   15,
       16,   17,   18,    1,   19,   19,   19,   19,   20,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
        1,   21,    1,    1,   19,    1,   22,   23,   24,   25,

       26,   27,   28,   29,   30,   19,   31,   32,   33,   34,
       35,   36,   19,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,    1,   47,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[48] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    1,    1,    1,    1,    4,    4,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1
    } ;

static yyconst flex_int16_t yy_base[351] =
    {   0,
        0,    0,   45,   46,  752,  753,   51,  753,  735,  753,
        0,  737,   43,   41,  733,  732,  734,   37,   46,   51,
       52,   57,   61,   67,   66,   72,   71,   77,   89,   81,
       97,  100,   49,  102,   82,  107,  106,  112,  117,  130,
      753,  753,  753,    0,  136,  753,  733,  128,  129,  143,
      753,  753,  753,  753,    0,  732,  132,  137,  731,  138,
      131,  144,  145,  147,  146,  148,  753,  163,  151,  150,
      153,  154,  160,  165,  152,   70,  162,  179,  180,  188,
      186,  187,  189,  192,  197,  201,  195,  198,  196,  209,
      730,  194,  200,  221,  211,  225,  227,  229,  230,  236,

      231,  237,  239,  242,  240,  241,  243,  245,  257,  705,
      753,    0,  728,  263,  727,  726,  244,  725,  251,  252,
      248,  256,  266,  193,  260,  274,  278,  724,  280,  288,
      723,  275,  281,  290,  722,  282,  285,  291,  296,  292,
      298,  293,  303,  300,  306,  308,  307,  721,  309,  326,
      310,  312,  323,  313,  328,  316,  330,  720,  719,  718,
      333,  327,  337,  344,  345,  347,  717,  350,  346,  351,
      352,  353,  360,  354,  355,  356,  361,  362,  366,  367,
      371,  372,  699,  374,  715,  714,  376,  713,  712,  377,
      383,  711,  710,  709,  753,  708,  707,  379,  381,  384,

      390,  706,  385,  395,  705,  380,  387,  388,  704,  405,
      703,  391,  702,  701,  700,  408,  410,  413,  411,  699,
      414,  698,  697,  696,  695,  416,  666,  657,  417,  655,
      420,  418,  654,  422,  653,  652,  651,  650,  649,  647,
      421,  426,  423,  428,  451,  438,  436,  424,  646,  431,
      434,  450,  453,  645,  454,  644,  643,  456,  457,  641,
      640,  639,  638,  458,  460,  459,  461,  462,  464,  463,
      637,  635,  633,  632,  491,  496,  465,  466,  468,  473,
      630,  494,  628,  498,  626,  476,  499,  500,  467,  503,
      504,  505,  506,  527,  544,  524,  547,  530,  550,  561,

      531,  624,  522,  620,  610,  579,  547,  556,  554,  542,
      568,  557,  559,  563,  581,  583,  585,  597,  600,  602,
      608,  614,  576,  527,  601,  515,  593,  609,  511,  508,
      753,  622,  624,  470,  191,  161,  155,  753,  671,  110,
      673,  677,  679,  681,  683,  687,  691,  695,  699,  703
    } ;

static yyconst flex_int16_t yy_def[351] =
    {   0,
      338,    1,  339,  339,  338,  338,  338,  338,  338,  338,
      340,  338,  338,  338,  338,  338,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  338,
      338,  338,  338,  342,  338,  338,  343,  338,  338,  338,
      338,  338,  338,  338,  344,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  338,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  338,  338,
      338,  345,  343,  338,  338,  338,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  338,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  338,  341,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  338,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  338,  346,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  346,  346,  347,  348,  348,  349,  346,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  338,  348,  347,  347,  350,  348,
      349,  349,  341,  341,  341,  341,  341,  341,  341,  341,
      338,  350,  350,  341,  341,  341,  341,    0,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338
    } ;

static yyconst flex_int16_t yy_nxt[801] =
    {   0,
        6,    7,    8,    7,    9,   10,   11,    6,    6,   12,
        6,    6,   13,    6,   14,   15,   16,    6,   17,   17,
        6,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   17,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   17,   38,   39,   40,    6,   42,   42,   55,
       43,   43,   45,   49,   45,   48,   51,   52,   55,   67,
       57,   55,   50,   55,   55,   44,   44,   61,   50,   55,
       58,   62,   64,   55,   59,   60,   65,   68,   55,   55,
       63,   69,   55,   55,   55,   66,   74,  100,   71,   55,
       72,   78,   70,   55,   55,   75,   76,  139,   83,   73,

       82,   55,   84,   77,   79,   80,   85,   90,   81,   55,
       88,   86,   55,   47,   55,  104,   87,   91,   55,   55,
       92,   97,   93,   89,   55,   98,   94,  101,  105,   55,
      102,  109,  109,   95,   99,  106,   96,   45,   49,   45,
       48,  114,  108,   55,   55,  103,  107,   50,   50,   55,
       55,  115,  115,   50,   50,  116,   55,   55,   55,   55,
       55,  118,   55,   55,   55,   55,   55,   55,  120,  110,
      117,  132,   55,   55,   55,   55,  119,   55,  134,  125,
      126,  135,  121,  122,  123,  124,  127,  131,  138,  128,
      133,   55,   55,  129,  130,  136,  140,  137,   55,   55,

       55,   55,  141,   55,   55,   55,   55,   55,   55,   55,
       55,  143,   55,   55,  190,  142,  144,  145,  147,  150,
      151,   55,  146,   55,  148,  153,  154,  149,  152,  157,
      155,  156,  160,   55,  158,  159,  164,   55,  161,   55,
      165,   55,   55,   55,  162,  166,  163,  167,   55,   55,
      169,   55,   55,   55,   55,   55,   55,   55,  109,  109,
       55,  171,  174,   55,   55,  168,  179,  173,   55,  170,
      172,  176,   55,  184,  175,  114,  177,  186,   55,  178,
      181,  180,   50,  182,  188,  185,   55,   55,   50,  187,
       55,  189,   55,   55,   55,  195,  110,   55,  191,  193,

       55,  193,   55,   55,   55,   55,  197,  194,   55,  192,
       55,  196,   55,  198,  199,   55,  202,  205,   55,   55,
       55,   55,   55,  203,   55,   55,  200,  208,   55,  210,
      201,  206,  204,  212,  209,   55,  207,  214,   55,   55,
       55,  213,   55,  217,  211,   55,  216,  215,  218,   55,
      222,  220,  219,  221,  224,  223,   55,   55,   55,   55,
      226,  225,   55,   55,   55,   55,   55,   55,   55,  231,
      227,  229,   55,   55,   55,  230,  232,  233,   55,   55,
      237,  235,  234,   55,   55,  228,   55,  236,   55,   55,
      240,   55,   55,   55,  238,   55,   55,   55,  239,   55,

       55,  247,   55,   55,  241,  242,  251,   55,  248,  243,
      244,  253,  249,  250,  246,  256,  255,   55,  252,  254,
       55,  257,   55,   55,  258,   55,   55,  259,   55,   55,
       55,  260,   55,   55,   55,   55,   55,  264,   55,  262,
       55,  266,  261,   55,  263,  270,   55,  272,   55,  274,
       55,  265,  275,  275,  269,  271,  267,  273,  268,  277,
      281,  278,   55,  280,  276,   55,   55,  279,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  282,   55,  291,  290,   55,  286,  287,   55,  283,
      284,  293,  275,  275,  285,  288,  310,  295,  295,  302,

      289,  292,  296,  301,  276,  303,   55,  297,  304,  298,
       55,   55,   55,  299,  307,   55,   55,   55,   55,  305,
       55,  309,  306,   55,  308,  315,  315,   55,  315,  315,
      313,  315,  315,  296,   55,  314,  296,  312,  298,   55,
      316,  311,  300,   55,  299,  295,  295,  299,  315,  315,
      296,  315,  315,  296,   55,  297,  296,  298,  319,   55,
      324,  299,  315,  315,  299,  323,   55,  296,   55,   55,
      318,   55,  298,  300,  316,   55,  320,  327,  299,  328,
       55,  325,  315,  315,  315,  315,  315,  315,   55,  296,
      300,   55,  326,  320,  297,  329,  322,  330,  315,  315,

      299,  315,  315,  315,  315,   55,  296,  300,  296,  315,
      315,  298,  334,   55,  296,  315,  315,  299,  336,  299,
      296,   55,   55,  315,  315,  315,  315,  331,  296,  320,
      296,  318,   55,  298,  337,  298,   55,  335,   55,  299,
       55,  299,   55,  318,   55,   55,  333,   55,  320,   55,
       55,   55,   55,   55,  322,   55,   55,   55,   55,   55,
      322,   55,   55,   55,   55,   55,   55,   55,  333,   55,
      333,   41,   41,   41,   41,   56,   56,  111,   55,  111,
      111,  113,  113,   55,   55,  112,  112,  294,  294,  294,
      294,  317,  317,  317,  317,  298,  298,  298,  298,  321,

      321,  321,  321,  332,  332,  332,  332,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,  245,   55,
       55,   55,   55,   55,   55,   55,   55,   55,  116,  116,
      112,  183,   55,   55,   55,  112,   55,   54,   53,   48,
       46,  338,    5,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338

    } ;

static yyconst flex_int16_t yy_chk[801] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,   18,
        3,    4,    7,   13,    7,   13,   14,   14,   19,   21,
       18,   33,   13,   20,   21,    3,    4,   19,   13,   22,
       18,   19,   20,   23,   18,   18,   20,   21,   25,   24,
       19,   21,   76,   27,   26,   20,   23,   33,   22,   28,
       22,   25,   21,   30,   35,   23,   24,   76,   28,   22,

       27,   29,   28,   24,   26,   26,   28,   30,   26,   31,
       29,   28,   32,  340,   34,   35,   28,   30,   37,   36,
       30,   32,   31,   29,   38,   32,   31,   34,   36,   39,
       34,   40,   40,   31,   32,   37,   31,   45,   48,   45,
       48,   49,   39,   61,   57,   34,   38,   48,   49,   58,
       60,   50,   50,   48,   49,   50,   62,   63,   65,   64,
       66,   58,   70,   69,   75,   71,   72,  337,   61,   40,
       57,   70,   73,  336,   77,   68,   60,   74,   72,   65,
       66,   73,   62,   63,   64,   64,   68,   69,   75,   68,
       71,   78,   79,   68,   68,   73,   77,   74,   81,   82,

       80,   83,   78,  335,   84,  124,   92,   87,   89,   85,
       88,   80,   93,   86,  124,   79,   80,   80,   82,   84,
       85,   90,   81,   95,   83,   86,   87,   83,   85,   89,
       88,   88,   92,   94,   89,   90,   95,   96,   93,   97,
       95,   98,   99,  101,   94,   95,   94,   96,  100,  102,
       98,  103,  105,  106,  104,  107,  117,  108,  109,  109,
      121,   99,  102,  119,  120,   97,  107,  101,  122,   98,
      100,  104,  125,  117,  103,  114,  105,  120,  123,  106,
      108,  107,  114,  108,  122,  119,  126,  132,  114,  121,
      127,  123,  129,  133,  136,  130,  109,  137,  125,  127,

      130,  129,  134,  138,  140,  142,  133,  127,  139,  126,
      141,  132,  144,  134,  134,  143,  136,  139,  145,  147,
      146,  149,  151,  137,  152,  154,  134,  142,  156,  144,
      134,  140,  138,  146,  143,  153,  141,  149,  150,  162,
      155,  147,  157,  152,  145,  161,  151,  150,  153,  163,
      156,  154,  153,  155,  161,  157,  164,  165,  169,  166,
      163,  162,  168,  170,  171,  172,  174,  175,  176,  169,
      164,  166,  173,  177,  178,  168,  170,  171,  179,  180,
      175,  173,  172,  181,  182,  165,  184,  174,  187,  190,
      178,  198,  206,  199,  176,  191,  200,  203,  177,  207,

      208,  187,  201,  212,  179,  180,  199,  204,  190,  181,
      182,  201,  191,  198,  184,  206,  204,  210,  200,  203,
      216,  207,  217,  219,  208,  218,  221,  210,  226,  229,
      232,  212,  231,  241,  234,  243,  248,  219,  242,  217,
      244,  226,  216,  250,  218,  234,  251,  242,  247,  244,
      246,  221,  245,  245,  232,  241,  229,  243,  231,  246,
      251,  247,  252,  250,  245,  253,  255,  248,  258,  259,
      264,  266,  265,  267,  268,  270,  269,  277,  278,  289,
      279,  252,  334,  268,  267,  280,  259,  264,  286,  253,
      255,  270,  275,  275,  258,  265,  289,  276,  276,  278,

      266,  269,  276,  277,  275,  279,  282,  276,  280,  276,
      284,  287,  288,  276,  286,  290,  291,  292,  293,  282,
      330,  288,  284,  329,  287,  296,  296,  326,  294,  294,
      292,  298,  298,  294,  303,  293,  298,  291,  294,  324,
      294,  290,  276,  301,  294,  295,  295,  298,  297,  297,
      295,  299,  299,  297,  310,  295,  299,  295,  297,  307,
      303,  295,  300,  300,  297,  301,  309,  300,  308,  312,
      296,  313,  300,  294,  300,  314,  298,  309,  300,  310,
      311,  307,  315,  315,  316,  316,  317,  317,  323,  316,
      295,  306,  308,  297,  316,  312,  299,  314,  318,  318,

      316,  319,  319,  320,  320,  327,  319,  300,  320,  321,
      321,  319,  323,  325,  321,  322,  322,  319,  327,  320,
      322,  328,  305,  332,  332,  333,  333,  315,  332,  316,
      333,  317,  304,  332,  328,  333,  302,  325,  285,  332,
      283,  333,  281,  318,  274,  273,  319,  272,  320,  271,
      263,  262,  261,  260,  321,  257,  256,  254,  249,  240,
      322,  239,  238,  237,  236,  235,  233,  230,  332,  228,
      333,  339,  339,  339,  339,  341,  341,  342,  227,  342,
      342,  343,  343,  344,  344,  345,  345,  346,  346,  346,
      346,  347,  347,  347,  347,  348,  348,  348,  348,  349,

      349,  349,  349,  350,  350,  350,  350,  225,  224,  223,
      222,  220,  215,  214,  213,  211,  209,  205,  202,  197,
      196,  194,  193,  192,  189,  188,  186,  185,  183,  167,
      160,  159,  158,  148,  135,  131,  128,  118,  116,  115,
      113,  110,   91,   59,   56,   47,   17,   16,   15,   12,
        9,    5,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "TeLICeMS/sources/TeLICeMScan.l"


#line 17 "TeLICeMS/sources/TeLICeMScan.l"
#include "TeLICeMStateScan.hxx"
/*
 * Note that a URI must conform to RFC2396 (see http://www.ietf.org/rfc/rfc2396.txt),
 * of which a regular expression is (see Appendix B):
 *
 *   ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
 *
 * Its Flex equivalent is:
 *
 *   ([^:/?# \t\n]+:)?(\/\/[^/?# \t\n]*)?[^?# \t\n]*(\?[^# \t\n]*)?(#[^ \t\n]*)?
 *
 * Note, however, that the above will catch pretty much anything, so it cannot
 * be used directly. See the T_URI rule for more information...
 */
#line 732 "TeLICeMScanner.cpp"

#define INITIAL 0
#define stringsc 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 34 "TeLICeMS/sources/TeLICeMScan.l"


#line 836 "TeLICeMScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 339 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 753 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 36 "TeLICeMS/sources/TeLICeMScan.l"
/* Ignore */
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 37 "TeLICeMS/sources/TeLICeMScan.l"
newRow();
	YY_BREAK
/* Reaction role types */
case 3:
YY_RULE_SETUP
#line 40 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->reactionRoleType(iface::cellml_api::Role::REACTANT);
  return T_ROLETYPE;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 44 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->reactionRoleType(iface::cellml_api::Role::PRODUCT);
  return T_ROLETYPE;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 48 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->reactionRoleType(iface::cellml_api::Role::RATE);
  return T_ROLETYPE;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 52 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->reactionRoleType(iface::cellml_api::Role::CATALYST);
  return T_ROLETYPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 56 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->reactionRoleType(iface::cellml_api::Role::ACTIVATOR);
  return T_ROLETYPE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->reactionRoleType(iface::cellml_api::Role::INHIBITOR);
  return T_ROLETYPE;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 64 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->reactionRoleType(iface::cellml_api::Role::MODIFIER);
  return T_ROLETYPE;
}
	YY_BREAK
/* Reacton directions... */
case 10:
YY_RULE_SETUP
#line 70 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->reactionDirectionType(iface::cellml_api::Role::FORWARD);
  return T_DIRECTIONTYPE;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 74 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->reactionDirectionType(iface::cellml_api::Role::REVERSE);
  return T_DIRECTIONTYPE;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 78 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->reactionDirectionType(iface::cellml_api::Role::BOTH);
  return T_DIRECTIONTYPE;
}
	YY_BREAK
/* SI Prefixes... */
case 13:
YY_RULE_SETUP
#line 84 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(24);
  return T_SIPREFIX;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 88 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(21);
  return T_SIPREFIX;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 92 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(18);
  return T_SIPREFIX;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 96 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(15);
  return T_SIPREFIX;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 100 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(12);
  return T_SIPREFIX;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 104 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(9);
  return T_SIPREFIX;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 108 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(6);
  return T_SIPREFIX;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 112 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(3);
  return T_SIPREFIX;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 116 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(2);
  return T_SIPREFIX;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 120 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(1);
  return T_SIPREFIX;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 124 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(-1);
  return T_SIPREFIX;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 128 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(-2);
  return T_SIPREFIX;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 132 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(-3);
  return T_SIPREFIX;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 136 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(-6);
  return T_SIPREFIX;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 140 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(-9);
  return T_SIPREFIX;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 144 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(-12);
  return T_SIPREFIX;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 148 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(-15);
  return T_SIPREFIX;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 152 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(-18);
  return T_SIPREFIX;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 156 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(-21);
  return T_SIPREFIX;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 160 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->siPrefix(-24);
  return T_SIPREFIX;
}
	YY_BREAK
/* Interface directions... */
case 33:
YY_RULE_SETUP
#line 166 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->variableInterfaceType(iface::cellml_api::INTERFACE_IN);
  return T_INTERFACETYPE;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 170 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->variableInterfaceType(iface::cellml_api::INTERFACE_OUT);
  return T_INTERFACETYPE;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 174 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->variableInterfaceType(iface::cellml_api::INTERFACE_NONE);
  return T_INTERFACETYPE;
}
	YY_BREAK
/* Reversibility */
case 36:
YY_RULE_SETUP
#line 180 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->boolean(false);
  return T_REVERSIBILITY;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 184 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->boolean(true);
  return T_REVERSIBILITY;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 189 "TeLICeMS/sources/TeLICeMScan.l"
return T_AND;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 190 "TeLICeMS/sources/TeLICeMScan.l"
return T_AS;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 191 "TeLICeMS/sources/TeLICeMScan.l"
return T_BASE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 192 "TeLICeMS/sources/TeLICeMScan.l"
return T_BETWEEN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 193 "TeLICeMS/sources/TeLICeMScan.l"
return T_CASE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 194 "TeLICeMS/sources/TeLICeMScan.l"
return T_COMP;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 195 "TeLICeMS/sources/TeLICeMScan.l"
return T_DIFF;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 196 "TeLICeMS/sources/TeLICeMScan.l"
return T_DEF;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 197 "TeLICeMS/sources/TeLICeMScan.l"
return T_PARTIALDIFF;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 198 "TeLICeMS/sources/TeLICeMScan.l"
return T_DIR;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 199 "TeLICeMS/sources/TeLICeMScan.l"
return T_DVAR;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 200 "TeLICeMS/sources/TeLICeMScan.l"
return T_ELSE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 201 "TeLICeMS/sources/TeLICeMScan.l"
return T_ENDCOMP;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 202 "TeLICeMS/sources/TeLICeMScan.l"
return T_ENDDEF;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 203 "TeLICeMS/sources/TeLICeMScan.l"
return T_ENDROLE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 204 "TeLICeMS/sources/TeLICeMScan.l"
return T_ENDVAR;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 205 "TeLICeMS/sources/TeLICeMScan.l"
return T_EXPO;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 206 "TeLICeMS/sources/TeLICeMScan.l"
return T_FOR;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 207 "TeLICeMS/sources/TeLICeMScan.l"
return T_GROUP;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 208 "TeLICeMS/sources/TeLICeMScan.l"
return T_IMPORT;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 209 "TeLICeMS/sources/TeLICeMScan.l"
return T_INCL;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 210 "TeLICeMS/sources/TeLICeMScan.l"
return T_INIT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 211 "TeLICeMS/sources/TeLICeMScan.l"
return T_MAP;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 212 "TeLICeMS/sources/TeLICeMScan.l"
return T_MATH;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 213 "TeLICeMS/sources/TeLICeMScan.l"
return T_MODEL;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 214 "TeLICeMS/sources/TeLICeMScan.l"
return T_MULT;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 215 "TeLICeMS/sources/TeLICeMScan.l"
return T_NAME;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 216 "TeLICeMS/sources/TeLICeMScan.l"
return T_NAMESPACE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 217 "TeLICeMS/sources/TeLICeMScan.l"
return T_NOT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 218 "TeLICeMS/sources/TeLICeMScan.l"
return T_OFF;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 219 "TeLICeMS/sources/TeLICeMScan.l"
return T_OR;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 220 "TeLICeMS/sources/TeLICeMScan.l"
return T_PIECEWISE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 221 "TeLICeMS/sources/TeLICeMScan.l"
return T_PREF;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 222 "TeLICeMS/sources/TeLICeMScan.l"
return T_PRIV;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 223 "TeLICeMS/sources/TeLICeMScan.l"
return T_PUB;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 224 "TeLICeMS/sources/TeLICeMScan.l"
return T_REACT;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 225 "TeLICeMS/sources/TeLICeMScan.l"
return T_ROLE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 226 "TeLICeMS/sources/TeLICeMScan.l"
return T_STOICHIO;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 227 "TeLICeMS/sources/TeLICeMScan.l"
return T_THEN;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 228 "TeLICeMS/sources/TeLICeMScan.l"
return T_TYPE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 229 "TeLICeMS/sources/TeLICeMScan.l"
return T_UNIT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 230 "TeLICeMS/sources/TeLICeMScan.l"
return T_VAR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 231 "TeLICeMS/sources/TeLICeMScan.l"
return T_VARS;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 232 "TeLICeMS/sources/TeLICeMScan.l"
return T_WITH;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 234 "TeLICeMS/sources/TeLICeMScan.l"
return T_EQEQ;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 235 "TeLICeMS/sources/TeLICeMScan.l"
return T_NEQ;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 236 "TeLICeMS/sources/TeLICeMScan.l"
return T_NEQ;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 237 "TeLICeMS/sources/TeLICeMScan.l"
return T_GE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 238 "TeLICeMS/sources/TeLICeMScan.l"
return T_LE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 240 "TeLICeMS/sources/TeLICeMScan.l"
{
  char c = YYText()[1];

  switch (c)
  {
    case 'n':
      mLValue->plusstring('\n');
      break;

    case 'r':
      mLValue->plusstring('\r');
      break;

    case 't':
      mLValue->plusstring('\t');
      break;

    case 'f':
      mLValue->plusstring('\f');
      break;

    default:
      mLValue->plusstring(c);
  }
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 266 "TeLICeMS/sources/TeLICeMScan.l"
{
  BEGIN(INITIAL);
  return T_QUOTED;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 271 "TeLICeMS/sources/TeLICeMScan.l"
mLValue->plusstring(YYText()[0]);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 273 "TeLICeMS/sources/TeLICeMScan.l"
{
  BEGIN(stringsc);
  mLValue->string("");
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 278 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->string(YYText() + 1);
  mLValue->mOverrideBuiltin = true;
  return T_IDENTIFIER;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 284 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->string(YYText());
  mLValue->mOverrideBuiltin = false;
  return T_IDENTIFIER;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 290 "TeLICeMS/sources/TeLICeMScan.l"
{
  mLValue->number(strtod(YYText(), NULL));
  return T_NUMBER;
}
	YY_BREAK
/* XXX Move most of this to the parser? */
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 296 "TeLICeMS/sources/TeLICeMScan.l"
{
  /*
   * The problem with URIs is to find a rule that can distinguish them from the
   * rest and that's where the problem lies since URIs can be made of any kind
   * of character. Now, what we do here is that we assume that the '}'
   * character is not critical/essential when it comes to URIs (is that a safe
   * assumption?!). As a result the above rule will allow to extract something
   * like
   *
   *   {uri: mymodel.cellml}
   *
   * This means that we need to strip a few things, so that we can end up with
   * something like
   *
   *   mymodel.cellml
   */
  const char* p = YYText();
  // Skip '{'
  p++;
  // Skip whitespace...
  while (*p == ' ' || *p == '\t' || *p == '\n')
  {
    if (*p == '\n')
    {
      newRow();
      // mTarget->mColumn = yyleng - (p - YYText()) - 1;
    }
    p++;
  }
  // Skip uri
  p += 3;
  // Skip whitespace...
  while (*p == ' ' || *p == '\t' || *p == '\n')
  {
    if (*p == '\n')
    {
      newRow();
      // mTarget->mColumn = yyleng - (p - YYText()) - 1;
    }
    p++;
  }
  // Skip ':'
  p++;
  // Skip whitespace...
  while (*p == ' ' || *p == '\t' || *p == '\n')
  {
    if (*p == '\n')
    {
      newRow();
      // mTarget->mColumn = yyleng - (p - YYText()) - 1;
    }
    p++;
  }
  const char* uri = p;
  // Find the end of the URI...
  while (*p != ' ' && *p != '\n' && *p != '\t' && *p != 0)
    p++;
  *(const_cast<char*>(p)) = 0;

  mLValue->string(uri);
  return T_URI;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 359 "TeLICeMS/sources/TeLICeMScan.l"
return YYText()[0];
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 360 "TeLICeMS/sources/TeLICeMScan.l"
ECHO;
	YY_BREAK
#line 1614 "TeLICeMScanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(stringsc):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	TeLICeMfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	TeLICeMfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					TeLICeMrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) TeLICeMrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 339 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 339 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 338);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) TeLICeMalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) TeLICeMalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		TeLICeMfree((void *) b->yy_ch_buf  );

	TeLICeMfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)TeLICeMalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)TeLICeMrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) TeLICeMalloc(new_size  );

		else
			(yy_start_stack) = (int *) TeLICeMrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *TeLICeMalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *TeLICeMrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void TeLICeMfree (void * ptr )
{
	free( (char *) ptr );	/* see TeLICeMrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 360 "TeLICeMS/sources/TeLICeMScan.l"
